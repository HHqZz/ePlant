var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
/* istanbul ignore file */
import { useState } from 'react';
import * as knobTypes from '@storybook/addon-knobs';
export var useKnob = function (knobType, name, defaultValue) {
    var knobFunc = knobTypes[knobType];
    var _a = __read(useState(defaultValue), 2), stateValue = _a[0], stateSetter = _a[1];
    var knobValue = knobFunc(name, stateValue);
    if (knobValue !== stateValue) {
        stateSetter(knobValue);
    }
    return [stateValue, stateSetter];
};
