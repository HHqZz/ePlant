var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React from 'react';
import { Docs, DocsExample, DocProps, DocsSubtitle, DocsP } from '@doc-utils';
import propsSrc from './generated-props.json';
import examples from './generated-examples.json';
import { IconButton } from '.';
export default function () {
    return (React.createElement(Docs, { title: "Icon Buttons", lead: "Icon buttons allow users to take actions, and make choices, with a single tap.", module: "@rmwc/icon-button", styles: ['@material/icon-button/dist/mdc.icon-button.css'], docsLink: "https://material.io/develop/web/components/buttons/icon-buttons/", examples: examples },
        React.createElement(DocsSubtitle, null, "Basic Usage"),
        React.createElement(DocsP, null, "`IconButton` inherits from the `Icon` component and can be passed icons in the same way."),
        React.createElement(DocsExample, { label: "Default" },
            React.createElement(React.Fragment, null,
                React.createElement(IconButton, { icon: "star", label: "Rate this!" }),
                React.createElement(IconButton, { icon: "favorite", label: "Favorite", disabled: true }),
                React.createElement(IconButton, { icon: "images/icons/twitter.png", "aria-label": "Tweet it!", tag: "a", target: "_blank", href: "https://twitter.com/intent/tweet?text=" + encodeURIComponent('You should definitely be using RMWC for your next project! https://rmwc.io') }))),
        React.createElement(DocsSubtitle, null, "Usage as a Toggle"),
        React.createElement(DocsP, null, "To use as a toggle, specify an additional toggled on state using 'onIcon'."),
        React.createElement(DocsExample, { label: "Uncontrolled" },
            React.createElement(React.Fragment, null,
                React.createElement(IconButton, { icon: "favorite_border", onIcon: "favorite" }),
                React.createElement(IconButton, { icon: "favorite", onIcon: "favorite", disabled: true }))),
        React.createElement(DocsExample, { label: "Controlled" }, function Controlled() {
            var _a = __read(React.useState(false), 2), isChecked = _a[0], setIsChecked = _a[1];
            return (React.createElement(React.Fragment, null,
                React.createElement(IconButton, { checked: isChecked, onClick: function () { return setIsChecked(!isChecked); }, onIcon: "star", icon: "star_border" }),
                React.createElement(IconButton, { checked: isChecked, onClick: function () { return setIsChecked(!isChecked); }, onIcon: "images/icons/twitter.png", icon: "images/icons/facebook.png" })));
        }),
        React.createElement(DocsExample, { label: "Component as Icon" },
            React.createElement(IconButton, { onIcon: React.createElement("div", { style: {
                        background: 'red',
                        width: '24px',
                        height: '24px'
                    } }), icon: React.createElement("div", { style: {
                        background: 'green',
                        width: '24px',
                        height: '24px',
                        borderRadius: '50%'
                    } }) })),
        React.createElement(DocProps, { src: propsSrc, components: [IconButton] })));
}
export var galleryExample = React.createElement(IconButton, { icon: "favorite_outlined" });
