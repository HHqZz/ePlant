import * as React from 'react';
import * as RMWC from '@rmwc/types';
declare type IconStrategyT = 'auto' | 'ligature' | 'className' | 'url' | 'component' | 'custom';
declare type TooltipActivationT = 'hover' | 'click' | 'focus';
declare type TooltipAlignT = 'left' | 'right' | 'top' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
declare type TooltipOptions = {
    /** How to align the tooltip. Defaults to `top`. */
    align?: TooltipAlignT;
    /** Activate the tooltip through one or more interactions. Defaults to `['hover', 'focus']`. */
    activateOn?: TooltipActivationT | TooltipActivationT[];
    /** Whether or not to show an arrow on the Tooltip. Defaults to `false`. */
    showArrow?: boolean;
    /** Delay in milliseconds before showing the tooltip when interacting via touch or mouse. */
    enterDelay?: number;
    /** Delay in milliseconds before hiding the tooltip when interacting via touch or mouse. */
    leaveDelay?: number;
};
declare type TypographyOptions = {
    defaultTag?: string | React.ComponentType<any>;
    headline1?: string | React.ComponentType<any>;
    headline2?: string | React.ComponentType<any>;
    headline3?: string | React.ComponentType<any>;
    headline4?: string | React.ComponentType<any>;
    headline5?: string | React.ComponentType<any>;
    headline6?: string | React.ComponentType<any>;
    subtitle1?: string | React.ComponentType<any>;
    subtitle2?: string | React.ComponentType<any>;
    body1?: string | React.ComponentType<any>;
    body2?: string | React.ComponentType<any>;
    caption?: string | React.ComponentType<any>;
    button?: string | React.ComponentType<any>;
    overline?: string | React.ComponentType<any>;
};
/** A provider for setting global options in RMWC. */
export interface RMWCProviderProps {
    /** Enable / Disable interaction ripples globally */
    ripple?: boolean;
    /** Global options for icons */
    icon?: Partial<RMWC.IconOptions>;
    /** Global tooltip options */
    tooltip?: Partial<TooltipOptions>;
    /** Global typography options */
    typography?: Partial<TypographyOptions>;
    /** Children to render */
    children?: React.ReactNode;
}
export interface DeprecatedRMWCProviderPropsT {
    /** DEPRECATED: Ripples for all components are now controlled by the providers ripple prop */
    buttonDefaultRipple?: boolean;
    /** DEPRECATED: Ripples for all components are now controlled by the providers ripple prop */
    listItemDefaultRipple?: boolean;
    /** DEPRECATED: Use the 'icon' prop. icon={{basename: 'material-icons'}} */
    iconClassNameBase?: string;
    /** DEPRECATED: Use the 'icon' prop. icon={{prefix: 'glyphicons-'}} */
    iconClassNamePrefix?: string;
    /** DEPRECATED: Use the 'icon' prop. icon={{strategy: 'className'}} */
    iconStrategy?: IconStrategyT;
    /** DEPRECATED: Use the 'icon' prop. icon={{render: () => <div />}} */
    iconRender?: (props: {
        content: React.ReactNode;
        className: string;
    }) => React.ReactNode;
}
export interface WithProviderContext {
    providerContext: RMWCProviderProps;
}
export declare const ProviderContext: React.Context<RMWCProviderProps>;
export declare const withProviderContext: () => <P extends {}>(Component: React.ComponentType<P & WithProviderContext>) => React.ComponentType<P & Partial<WithProviderContext>>;
/** A provider for setting global options in RMWC. */
export declare const RMWCProvider: {
    ({ children, iconClassNameBase, iconClassNamePrefix, iconStrategy, iconRender, ...rest }: RMWCProviderProps & DeprecatedRMWCProviderPropsT): JSX.Element;
    displayName: string;
};
export {};
