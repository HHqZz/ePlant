import * as RMWC from '@rmwc/types';
import * as React from 'react';
import { MDCRippleFoundation } from '@material/ripple';
import { FoundationComponent } from '@rmwc/base';
export interface RippleSurfaceProps {
    className: string;
    style: React.CSSProperties;
}
/** A component for adding Ripples to other components. */
export interface RippleProps {
    /** Makes the ripple unbounded */
    unbounded?: boolean;
    /** Makes the ripple primary */
    primary?: boolean;
    /** Makes the ripple an accent color*/
    accent?: boolean;
    /** makes the ripple disabled */
    disabled?: boolean;
    /** For internal use */
    surface?: boolean;
}
declare type ActivateEventTypes<S> = React.MouseEvent<S> | React.TouchEvent<S> | React.KeyboardEvent<S> | React.FocusEvent<S>;
/** A component for adding Ripples to other components. */
export declare class Ripple extends FoundationComponent<MDCRippleFoundation, RippleProps> {
    static shouldDebounce: boolean;
    static displayName: string;
    private root;
    private surface;
    private isTouched;
    constructor(props: RippleProps);
    getDefaultFoundation(): MDCRippleFoundation;
    sync(props: RippleProps, prevProps: RippleProps): void;
    handleFocus(evt: React.FocusEvent<HTMLElement>): void;
    handleBlur(evt: React.FocusEvent<HTMLElement>): void;
    handleMouseDown(evt: React.MouseEvent<HTMLElement> & MouseEvent): void;
    handleMouseUp(evt: React.MouseEvent<HTMLElement>): void;
    handleTouchStart(evt: React.TouchEvent<HTMLElement> & TouchEvent): void;
    handleTouchEnd(evt: React.TouchEvent<HTMLElement>): void;
    handleKeyDown(evt: React.KeyboardEvent<HTMLElement> & KeyboardEvent): void;
    handleKeyUp(evt: React.KeyboardEvent<HTMLElement>): void;
    activateRipple(evt: ActivateEventTypes<HTMLElement> & Event): void;
    deactivateRipple(evt: ActivateEventTypes<HTMLElement>): void;
    render(): JSX.Element | null;
}
export declare const RippleSurface: ({ className, ...rest }: React.HTMLAttributes<HTMLDivElement>) => JSX.Element;
interface WithRippleOpts {
    accent?: boolean;
    surface?: boolean;
    unbounded?: boolean;
}
/**
 * HOC that adds ripples to any component
 */
export declare const withRipple: ({ unbounded: defaultUnbounded, accent: defaultAccent, surface: defaultSurface }?: WithRippleOpts) => <P extends {}>(Component: React.ComponentType<P & RMWC.WithRippleProps>) => React.ComponentType<P & RMWC.WithRippleProps>;
export {};
