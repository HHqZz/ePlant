{
  "npm": {},
  "typescript": {
    "SimpleTopAppBar": {
      "documentation": {
        "contents": [
          "<p>A simplified syntax for creating an AppBar.</p>\n"
        ],
        "contentsRaw": "A simplified syntax for creating an AppBar.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "class",
      "name": "SimpleTopAppBar",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L306",
      "extends": [
        "Component<SimpleTopAppBarProps & ComponentProps>"
      ],
      "methods": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleTopAppBarProps & ComponentProps>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "UNSAFE_componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "UNSAFE_componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleTopAppBarProps & ComponentProps>, nextState: Readonly<S>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidCatch",
          "inheritedFrom": "ComponentLifecycle.componentDidCatch",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                ],
                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidCatch",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "error",
                  "type": "Error"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "errorInfo",
                  "type": "ErrorInfo"
                }
              ],
              "returnType": "void",
              "type": "(error: Error, errorInfo: ErrorInfo) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidMount",
          "inheritedFrom": "ComponentLifecycle.componentDidMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately after a component is mounted. Setting state here will trigger re-rendering.</p>\n"
                ],
                "contentsRaw": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentDidUpdate",
          "inheritedFrom": "NewLifecycle.componentDidUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately after updating occurs. Not called for the initial render.</p>\n<p>The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.</p>\n"
                ],
                "contentsRaw": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentDidUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "snapshot",
                  "type": "SS"
                }
              ],
              "returnType": "void",
              "type": "(prevProps: Readonly<SimpleTopAppBarProps & ComponentProps>, prevState: Readonly<S>, snapshot?: SS) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillMount",
          "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillMount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillReceiveProps",
          "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillReceiveProps",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleTopAppBarProps & ComponentProps>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUnmount",
          "inheritedFrom": "ComponentLifecycle.componentWillUnmount",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in <code>componentDidMount</code>.</p>\n"
                ],
                "contentsRaw": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUnmount",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "componentWillUpdate",
          "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                  }
                ],
                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "componentWillUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "void",
              "type": "(nextProps: Readonly<SimpleTopAppBarProps & ComponentProps>, nextState: Readonly<S>, nextContext: any) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "forceUpdate",
          "inheritedFrom": "Component.forceUpdate",
          "signatures": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "forceUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "undefined | () => void"
                }
              ],
              "returnType": "void",
              "type": "(callback?: undefined | () => void) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getSnapshotBeforeUpdate",
          "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                ],
                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "getSnapshotBeforeUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevProps",
                  "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "prevState",
                  "type": "Readonly<S>"
                }
              ],
              "returnType": "SS | null",
              "type": "(prevProps: Readonly<SimpleTopAppBarProps & ComponentProps>, prevState: Readonly<S>) => SS | null"
            }
          ]
        },
        {
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L311",
          "signatures": [
            {
              "fileName": "src/top-app-bar/index.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L311",
              "parameters": [],
              "returnType": "Element",
              "type": "() => Element"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "setState",
          "inheritedFrom": "Component.setState",
          "signatures": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "setState",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "state",
                  "type": "(prevState: Readonly<S>, props: Readonly<SimpleTopAppBarProps & ComponentProps>) => null | S |  | null | S | "
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": true,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "callback",
                  "type": "undefined | () => void"
                }
              ],
              "returnType": "void",
              "type": "(state: (prevState: Readonly<S>, props: Readonly<SimpleTopAppBarProps & ComponentProps>) => null | S |  | null | S | , callback?: undefined | () => void) => void"
            }
          ]
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "shouldComponentUpdate",
          "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                ],
                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                "metadata": {}
              },
              "fileName": "node_modules/@types/react/index.d.ts",
              "kind": "signature",
              "name": "shouldComponentUpdate",
              "parameters": [
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextProps",
                  "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextState",
                  "type": "Readonly<S>"
                },
                {
                  "flags": {
                    "isExported": false,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                  },
                  "kind": "parameter",
                  "name": "nextContext",
                  "type": "any"
                }
              ],
              "returnType": "boolean",
              "type": "(nextProps: Readonly<SimpleTopAppBarProps & ComponentProps>, nextState: Readonly<S>, nextContext: any) => boolean"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If set, <code>this.context</code> will be set at runtime to the current value of the given Context.</p>\n<p>Usage:</p>\n<pre><code class=\"lang-ts\">type MyContext = number\nconst Ctx = React.createContext&lt;MyContext&gt;(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType&lt;typeof Ctx&gt;\n  render () {\n    return &lt;&gt;My context&#39;s value: {this.context}&lt;/&gt;;\n  }\n}\n</code></pre>\n",
              {
                "tag": "see",
                "value": "https://reactjs.org/docs/context.html#classcontexttype"
              }
            ],
            "contentsRaw": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n\n\n@see https://reactjs.org/docs/context.html#classcontexttype",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "contextType",
          "inheritedFrom": "Component.contextType",
          "type": "Context<any>"
        },
        {
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": true
          },
          "kind": "property",
          "name": "displayName",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L309",
          "defaultValue": "\"SimpleTopAppBar\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>If using the new style context, re-declare this in your class to be the\n<code>React.ContextType</code> of your <code>static contextType</code>.</p>\n<pre><code class=\"lang-ts\">static contextType = MyContext\ncontext!: React.ContextType&lt;typeof MyContext&gt;\n</code></pre>\n",
              {
                "tag": "see",
                "value": "https://reactjs.org/docs/legacy-context.html"
              }
            ],
            "contentsRaw": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\n\n```ts\nstatic contextType = MyContext\ncontext!: React.ContextType<typeof MyContext>\n```\n\n\n@see https://reactjs.org/docs/legacy-context.html",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isDeprecated": "if used without a type annotation, or without static contextType",
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "context",
          "inheritedFrom": "Component.context",
          "type": "any"
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "props",
          "inheritedFrom": "Component.props",
          "type": "Readonly<SimpleTopAppBarProps & ComponentProps> & Readonly<>"
        },
        {
          "documentation": {
            "contents": [],
            "contentsRaw": "",
            "metadata": {}
          },
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isDeprecated": "https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs",
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "refs",
          "inheritedFrom": "Component.refs",
          "type": "{ [key: string]: ReactInstance }"
        },
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "state",
          "inheritedFrom": "Component.state",
          "type": "Readonly<S>"
        }
      ],
      "constructorType": {
        "documentation": {
          "contents": [
            {
              "tag": "see",
              "value": "https://reactjs.org/docs/legacy-context.html"
            }
          ],
          "contentsRaw": "@see https://reactjs.org/docs/legacy-context.html",
          "metadata": {}
        },
        "fileName": "node_modules/@types/react/index.d.ts",
        "flags": {
          "isDeprecated": true,
          "isExported": true,
          "isExternal": false,
          "isOptional": false,
          "isPrivate": false,
          "isProtected": false,
          "isPublic": false,
          "isRest": false,
          "isStatic": false
        },
        "kind": "constructor",
        "name": "constructor",
        "inheritedFrom": "Component.__constructor",
        "signatures": [
          {
            "documentation": {
              "contents": [],
              "contentsRaw": "",
              "metadata": {}
            },
            "fileName": "node_modules/@types/react/index.d.ts",
            "kind": "signature",
            "name": "new SimpleTopAppBar",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "Readonly<SimpleTopAppBarProps & ComponentProps>"
              }
            ],
            "returnType": "SimpleTopAppBar",
            "type": "(props: Readonly<SimpleTopAppBarProps & ComponentProps>) => SimpleTopAppBar"
          },
          {
            "documentation": {
              "contents": [
                {
                  "tag": "see",
                  "value": "https://reactjs.org/docs/legacy-context.html"
                }
              ],
              "contentsRaw": "@see https://reactjs.org/docs/legacy-context.html",
              "metadata": {}
            },
            "fileName": "node_modules/@types/react/index.d.ts",
            "kind": "signature",
            "name": "new SimpleTopAppBar",
            "parameters": [
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": false,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "props",
                "type": "SimpleTopAppBarProps & ComponentProps"
              },
              {
                "flags": {
                  "isExported": false,
                  "isExternal": false,
                  "isOptional": true,
                  "isPrivate": false,
                  "isProtected": false,
                  "isPublic": false,
                  "isRest": false,
                  "isStatic": false
                },
                "kind": "parameter",
                "name": "context",
                "type": "any"
              }
            ],
            "returnType": "SimpleTopAppBar",
            "type": "(props: SimpleTopAppBarProps & ComponentProps, context?: any) => SimpleTopAppBar"
          }
        ]
      }
    },
    "TopAppBarProps": {
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TopAppBarProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L18",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar to be dense.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar to be dense.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dense",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L30",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar as a fixed top app bar.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar as a fixed top app bar.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fixed",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L22",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Emits when the navigation icon is clicked.</p>\n"
            ],
            "contentsRaw": "Emits when the navigation icon is clicked.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNav",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L20",
          "type": "undefined | (evt: TopAppBarOnNavEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar as a prominent top app bar.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar as a prominent top app bar.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "prominent",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L24",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Set a scrollTarget other than the window when you are using the TopAppBar inside of a nested scrolling DOM Element.</p>\n"
            ],
            "contentsRaw": "Set a scrollTarget other than the window when you are using the TopAppBar inside of a nested scrolling DOM Element.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollTarget",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L32",
          "type": "Element | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar as a short top app bar.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar as a short top app bar.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "short",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L26",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar to always be collapsed.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar to always be collapsed.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "shortCollapsed",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L28",
          "type": "undefined | false | true"
        }
      ]
    },
    "TopAppBarRowProps": {
      "documentation": {
        "contents": [
          "<p>A row for the app bar.</p>\n"
        ],
        "contentsRaw": "A row for the app bar.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TopAppBarRowProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L52",
      "methods": [],
      "properties": []
    },
    "TopAppBarSectionProps": {
      "documentation": {
        "contents": [
          "<p>A section for the app bar.</p>\n"
        ],
        "contentsRaw": "A section for the app bar.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TopAppBarSectionProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L61",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Aligns the section to the end.</p>\n"
            ],
            "contentsRaw": "Aligns the section to the end.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignEnd",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L65",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Aligns the section to the start.</p>\n"
            ],
            "contentsRaw": "Aligns the section to the start.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignStart",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L63",
          "type": "undefined | false | true"
        }
      ]
    },
    "TopAppBarNavigationIconProps": {
      "documentation": {
        "contents": [
          "<p>A navigation icon for the top app bar. This is an instance of the Icon component.</p>\n"
        ],
        "contentsRaw": "A navigation icon for the top app bar. This is an instance of the Icon component.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TopAppBarNavigationIconProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L83",
      "extends": [
        "IconButtonProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{accent: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{accent: true}}`",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "accent",
          "inheritedFrom": "DeprecatedRippleProps.accent",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Controls the on / off state of the a toggleable button.</p>\n"
            ],
            "contentsRaw": "Controls the on / off state of the a toggleable button.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "checked",
          "inheritedFrom": "IconButtonProps.checked",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Makes the button disabled</p>\n"
            ],
            "contentsRaw": "Makes the button disabled",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "inheritedFrom": "IconButtonProps.disabled",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Icon for the button</p>\n"
            ],
            "contentsRaw": "Icon for the button",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "inheritedFrom": "IconButtonProps.icon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>An onChange callback that receives a custom event. evt.detail = { isOn: boolean }</p>\n"
            ],
            "contentsRaw": "An onChange callback that receives a custom event. evt.detail = { isOn: boolean }",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "inheritedFrom": "IconButtonProps.onChange",
          "type": "undefined | (evt: IconButtonOnChangeEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If specified, renders a toggle with this icon as the on state.</p>\n"
            ],
            "contentsRaw": "If specified, renders a toggle with this icon as the on state.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onIcon",
          "inheritedFrom": "IconButtonProps.onIcon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Adds a ripple effect to the component</p>\n"
            ],
            "contentsRaw": "Adds a ripple effect to the component",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ripple",
          "inheritedFrom": "WithRippleProps.ripple",
          "type": "RipplePropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{surface: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{surface: true}}`",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "surface",
          "inheritedFrom": "DeprecatedRippleProps.surface",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{unbounded: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{unbounded: true}}`",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "unbounded",
          "inheritedFrom": "DeprecatedRippleProps.unbounded",
          "type": "undefined | false | true"
        }
      ]
    },
    "TopAppBarActionItemProps": {
      "documentation": {
        "contents": [
          "<p>Action items for the top app bar. This is an instance of the IconButton component.</p>\n"
        ],
        "contentsRaw": "Action items for the top app bar. This is an instance of the IconButton component.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TopAppBarActionItemProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L95",
      "extends": [
        "IconButtonProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{accent: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{accent: true}}`",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "accent",
          "inheritedFrom": "DeprecatedRippleProps.accent",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Controls the on / off state of the a toggleable button.</p>\n"
            ],
            "contentsRaw": "Controls the on / off state of the a toggleable button.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "checked",
          "inheritedFrom": "IconButtonProps.checked",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Makes the button disabled</p>\n"
            ],
            "contentsRaw": "Makes the button disabled",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "inheritedFrom": "IconButtonProps.disabled",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Icon for the button</p>\n"
            ],
            "contentsRaw": "Icon for the button",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "inheritedFrom": "IconButtonProps.icon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>An onChange callback that receives a custom event. evt.detail = { isOn: boolean }</p>\n"
            ],
            "contentsRaw": "An onChange callback that receives a custom event. evt.detail = { isOn: boolean }",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "inheritedFrom": "IconButtonProps.onChange",
          "type": "undefined | (evt: IconButtonOnChangeEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If specified, renders a toggle with this icon as the on state.</p>\n"
            ],
            "contentsRaw": "If specified, renders a toggle with this icon as the on state.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/icon-button/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onIcon",
          "inheritedFrom": "IconButtonProps.onIcon",
          "type": "RMWC.IconPropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>Adds a ripple effect to the component</p>\n"
            ],
            "contentsRaw": "Adds a ripple effect to the component",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ripple",
          "inheritedFrom": "WithRippleProps.ripple",
          "type": "RipplePropT"
        },
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{surface: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{surface: true}}`",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "surface",
          "inheritedFrom": "DeprecatedRippleProps.surface",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>DEPRECATED: pass an options object to the ripple prop <code>ripple={{unbounded: true}}</code></p>\n"
            ],
            "contentsRaw": "DEPRECATED: pass an options object to the ripple prop `ripple={{unbounded: true}}`",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/node_modules/@rmwc/types/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "unbounded",
          "inheritedFrom": "DeprecatedRippleProps.unbounded",
          "type": "undefined | false | true"
        }
      ]
    },
    "TopAppBarTitleProps": {
      "documentation": {
        "contents": [
          "<p>A title for the top app bar.</p>\n"
        ],
        "contentsRaw": "A title for the top app bar.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TopAppBarTitleProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L105",
      "methods": [],
      "properties": []
    },
    "TopAppBarFixedAdjustProps": {
      "documentation": {
        "contents": [
          "<p>An optional component to fill the space when the TopAppBar is fixed. Place it directly after the TopAppBar.</p>\n"
        ],
        "contentsRaw": "An optional component to fill the space when the TopAppBar is fixed. Place it directly after the TopAppBar.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "TopAppBarFixedAdjustProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L114",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Class used to style the content below the dense top app bar to prevent the top app bar from covering it.</p>\n"
            ],
            "contentsRaw": "Class used to style the content below the dense top app bar to prevent the top app bar from covering it.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dense",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L116",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Class used to style the content below the top app bar when styled as both prominent and dense, to prevent the top app bar from covering it.</p>\n"
            ],
            "contentsRaw": "Class used to style the content below the top app bar when styled as both prominent and dense, to prevent the top app bar from covering it.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "denseProminent",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L120",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Class used to style the content below the prominent top app bar to prevent the top app bar from covering it.</p>\n"
            ],
            "contentsRaw": "Class used to style the content below the prominent top app bar to prevent the top app bar from covering it.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "prominent",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L118",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Class used to style the content below the short top app bar to prevent the top app bar from covering it.</p>\n"
            ],
            "contentsRaw": "Class used to style the content below the short top app bar to prevent the top app bar from covering it.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "short",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L122",
          "type": "undefined | false | true"
        }
      ]
    },
    "SimpleTopAppBarProps": {
      "documentation": {
        "contents": [
          "<p>A simplified syntax for creating an AppBar.</p>\n"
        ],
        "contentsRaw": "A simplified syntax for creating an AppBar.",
        "metadata": {}
      },
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "SimpleTopAppBarProps",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L292",
      "extends": [
        "TopAppBarProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>An array of props that will be used to create TopAppBarActionItems.</p>\n"
            ],
            "contentsRaw": "An array of props that will be used to create TopAppBarActionItems.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "actionItems",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L296",
          "type": "Object[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar to be dense.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar to be dense.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dense",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L30",
          "inheritedFrom": "TopAppBarProps.dense",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Additional content to place in the end section.</p>\n"
            ],
            "contentsRaw": "Additional content to place in the end section.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "endContent",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L302",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar as a fixed top app bar.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar as a fixed top app bar.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fixed",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L22",
          "inheritedFrom": "TopAppBarProps.fixed",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props for the NavigationIcon, which is an instance of the Icon component. You can also set this to <code>true</code> and use the <code>onNav</code> prop to handle interactions.</p>\n"
            ],
            "contentsRaw": "Props for the NavigationIcon, which is an instance of the Icon component. You can also set this to `true` and use the `onNav` prop to handle interactions.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "navigationIcon",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L298",
          "type": "Object | boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Emits when the navigation icon is clicked.</p>\n"
            ],
            "contentsRaw": "Emits when the navigation icon is clicked.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNav",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L20",
          "inheritedFrom": "TopAppBarProps.onNav",
          "type": "undefined | (evt: TopAppBarOnNavEventT) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar as a prominent top app bar.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar as a prominent top app bar.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "prominent",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L24",
          "inheritedFrom": "TopAppBarProps.prominent",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Set a scrollTarget other than the window when you are using the TopAppBar inside of a nested scrolling DOM Element.</p>\n"
            ],
            "contentsRaw": "Set a scrollTarget other than the window when you are using the TopAppBar inside of a nested scrolling DOM Element.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollTarget",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L32",
          "inheritedFrom": "TopAppBarProps.scrollTarget",
          "type": "Element | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar as a short top app bar.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar as a short top app bar.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "short",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L26",
          "inheritedFrom": "TopAppBarProps.short",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styles the top app bar to always be collapsed.</p>\n"
            ],
            "contentsRaw": "Styles the top app bar to always be collapsed.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "shortCollapsed",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L28",
          "inheritedFrom": "TopAppBarProps.shortCollapsed",
          "type": "undefined | false | true"
        },
        {
          "documentation": {
            "contents": [
              "<p>Additional content to place in the start section.</p>\n"
            ],
            "contentsRaw": "Additional content to place in the start section.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "startContent",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L300",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>The title for the App Bar.</p>\n"
            ],
            "contentsRaw": "The title for the App Bar.",
            "metadata": {}
          },
          "fileName": "src/top-app-bar/index.tsx",
          "flags": {
            "isExported": true,
            "isExternal": false,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isRest": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L294",
          "type": "React.ReactNode"
        }
      ]
    },
    "TopAppBarOnNavEventT": {
      "fileName": "src/top-app-bar/index.tsx",
      "flags": {
        "isExported": true,
        "isExternal": false,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isRest": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "TopAppBarOnNavEventT",
      "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/top-app-bar/index.tsx#L16",
      "type": "RMWC.CustomEventT<{}>"
    }
  }
}
